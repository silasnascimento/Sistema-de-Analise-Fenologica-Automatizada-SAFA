import { useState } from 'react';
import './App.css';
import Map from './components/Map';
import TabContainer from './components/TabContainer';
import PhenologyChart from './components/PhenologyChart';
import DiagnosticTable from './components/DiagnosticTable';
import CustomAnalysisResults from './components/CustomAnalysisResults';
import Spinner from './components/Spinner';
import { fetchAnalysis, fetchCustomAnalysis } from './api/geeApi';
import phenologyDB from './data/phenologyDatabase.json';

const LoadingOverlay = () => (
  <div className="absolute inset-0 bg-slate-900/80 flex flex-col justify-center items-center z-20 text-slate-200">
    <Spinner />
    <p className="mt-4 text-slate-300 font-semibold">Processando diagn칩stico...</p>
  </div>
);

// Novo componente para o 칤cone do formul치rio
const FormIcon = () => (
  <div className="mx-auto mb-4 w-24 h-28 bg-gray-50 rounded-lg shadow-sm flex flex-col items-center justify-center border border-gray-200">
    <div className="text-lg font-bold text-gray-700 mb-3">Formul치rio de dados da sua 치rea de an치lise</div>
    <div className="space-y-1.5 w-16">
      {[...Array(4)].map((_, i) => (
        <div key={i} className="h-1.5 bg-gray-300 rounded w-full"></div>
      ))}
      <div className="h-1.5 bg-gray-300 rounded w-8"></div>
    </div>
  </div>
);

function App() {
  const [drawnPolygon, setDrawnPolygon] = useState(null);
  const [formData, setFormData] = useState({ apiKey: '', plotName: '', cropType: '', startDate: '' });
  const [isLoading, setIsLoading] = useState(false);
  const [analysisResult, setAnalysisResult] = useState(null);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('phenological');

  const handlePolygonCreated = (geoJson) => setDrawnPolygon(geoJson);
  const handlePolygonEdited = (geoJson) => setDrawnPolygon(geoJson);
  const handlePolygonDeleted = () => setDrawnPolygon(null);

  const handleGenerateDiagnosis = async () => {
    setAnalysisResult(null);
    setError(null);
    setIsLoading(true);
    try {
      const analysisData = { polygon: drawnPolygon, formData: formData };
      const result = await fetchAnalysis(analysisData);
      setAnalysisResult(result);
    } catch (err) {
      setError("N칚o foi poss칤vel gerar o diagn칩stico. Verifique os dados ou tente novamente mais tarde.");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleGenerateCustomAnalysis = async () => {
    setAnalysisResult(null);
    setError(null);
    setIsLoading(true);
    try {
      const analysisData = { polygon: drawnPolygon, formData: formData };
      const result = await fetchCustomAnalysis(analysisData);
      setAnalysisResult(result);
    } catch (err) {
      setError("N칚o foi poss칤vel gerar a an치lise avulsa. Verifique os per칤odos definidos ou tente novamente mais tarde.");
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  const isFormValid = drawnPolygon && formData.apiKey && formData.plotName && formData.cropType && formData.startDate;
  const isCustomFormValid = drawnPolygon && formData.apiKey && formData.customPlotName && formData.customPeriods && formData.customPeriods.length > 0 && formData.customPeriods.every(p => p.startDate && p.endDate);
  const selectedCropData = formData.cropType ? phenologyDB.culturas.find(c => c.id === formData.cropType) : null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-100 to-slate-200 text-gray-800 flex flex-col lg:flex-row">
      {/* Left Sidebar */}
      <div className="w-full lg:w-96 bg-white shadow-lg lg:border-r border-b lg:border-b-0 border-gray-200 flex flex-col lg:h-screen">
        {/* Header Section */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
              <span className="text-white text-lg">游꺔</span>
            </div>
            <div>
              <h1 className="text-xl font-bold text-gray-900"> 游꺔 SAFA</h1>
              <h2 className="text-sm font-bold text-gray-900">Diagn칩stico Inteligente</h2>
            </div>
          </div>
          <p className="text-xs text-gray-500 mb-1">Sistema de An치lise Fenol칩gico Automatizado</p>
          <p className="text-xs text-gray-400">Desenvolvido por <a href="https://silasogis.com" target="_blank" className="text-blue-600 hover:text-blue-800">Silas Oliveira</a></p>
        </div>

        {/* Form Section */}
        <div className="flex-1 p-6 overflow-y-auto relative">
          {isLoading && <LoadingOverlay />}
          
          {/* Form Icon */}
          <FormIcon />
          
          {/* API Key */}
          <div className="mb-4">
            <label htmlFor="apiKey" className="block text-sm font-medium text-gray-700 mb-2">
              API Key <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              id="apiKey"
              name="apiKey"
              value={formData.apiKey}
              onChange={(e) => setFormData(prev => ({ ...prev, apiKey: e.target.value }))}
              placeholder="Insira sua chave da API"
              className="block w-full rounded-lg border border-gray-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
            {!formData.apiKey && (
              <p className="mt-1 text-xs text-gray-500">Necess치ria para executar as an치lises.</p>
            )}
          </div>

          <TabContainer formData={formData} setFormData={setFormData} activeTab={activeTab} setActiveTab={setActiveTab} />
          
          <div className="mt-6">
            {activeTab === 'phenological' && (
              <button 
                onClick={handleGenerateDiagnosis} 
                disabled={!isFormValid || isLoading} 
                className={`w-full text-white font-semibold py-3 px-4 rounded-lg transition-colors ${
                  isFormValid && !isLoading 
                    ? 'bg-indigo-600 hover:bg-indigo-700 shadow-md hover:shadow-lg' 
                    : 'bg-gray-400 cursor-not-allowed'
                }`}
              >
                {isLoading ? 'Processando...' : 'Gerar Diagn칩stico Fenol칩gico'}
              </button>
            )}
            {activeTab === 'custom' && (
              <button 
                onClick={handleGenerateCustomAnalysis} 
                disabled={!isCustomFormValid || isLoading} 
                className={`w-full text-white font-semibold py-3 px-4 rounded-lg transition-colors ${
                  isCustomFormValid && !isLoading 
                    ? 'bg-blue-600 hover:bg-blue-700 shadow-md hover:shadow-lg' 
                    : 'bg-gray-400 cursor-not-allowed'
                }`}
              >
                {isLoading ? 'Processando...' : 'Gerar An치lise Avulsa'}
              </button>
            )}
          </div>

          {error && (
            <div className="mt-4 p-4 bg-red-50 border border-red-200 text-red-700 rounded-lg">
              <p className="font-semibold text-red-800">Ocorreu um Erro</p>
              <p className="text-sm">{error}</p>
            </div>
          )}

          {/* Results Section in Sidebar */}
          {analysisResult && (
            <div className="mt-6 space-y-6">
              {/* Phenology Chart */}
              {activeTab === 'phenological' && selectedCropData && (
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-sm font-semibold text-gray-800 mb-2">Curva de Vida da Lavoura</h3>
                  <p className="text-xs text-gray-600 mb-3">NDVI Observado vs. Esperado</p>
                  <div className="h-48">
                    <PhenologyChart apiResult={analysisResult.ndvi} phenologyData={selectedCropData} />
                  </div>
                </div>
              )}

              {/* Diagnostic Table */}
              {activeTab === 'phenological' && selectedCropData && (
                <div className="bg-gray-50 rounded-lg p-4">
                  <h3 className="text-sm font-semibold text-gray-800 mb-3">Tabela de Diagn칩stico</h3>
                  <DiagnosticTable analysisResult={analysisResult} phenologyData={selectedCropData} />
                </div>
              )}

              {/* Custom Analysis Results */}
              {activeTab === 'custom' && (
                <div className="bg-gray-50 rounded-lg p-4">
                  <CustomAnalysisResults analysisResult={analysisResult} />
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Right Side - Map */}
      <div className="flex-1 flex flex-col lg:h-screen">
        {/* Map Header */}
        <div className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
          <h3 className="text-xl font-semibold text-gray-800">Mapa interativo para criar o limite da sua 치rea</h3>
        </div>
        
        {/* Map Container */}
        <div className="flex-1 h-96 lg:h-auto">
          <Map
            onPolygonCreated={handlePolygonCreated}
            onPolygonEdited={handlePolygonEdited}
            onPolygonDeleted={handlePolygonDeleted}
            analysisResult={analysisResult}
            phenologyData={selectedCropData}
            activeTab={activeTab}
          />
        </div>
      </div>
    </div>
  );
}

export default App;